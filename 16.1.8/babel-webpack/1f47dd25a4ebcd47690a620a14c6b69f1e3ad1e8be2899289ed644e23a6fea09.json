{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiBaseUrl = 'http://localhost:3000'; // Replace with your API base URL\n  }\n\n  signIn(email, password) {\n    const url = `${this.apiBaseUrl}/users/tokens/sign_in`;\n    const data = {\n      email,\n      password\n    };\n    return this.http.post(url, data).pipe(Map(response => {\n      this.setToken(response.token);\n      return response;\n    }));\n  }\n  signUp(email, password) {\n    const url = `${this.apiBaseUrl}/users/tokens/sign_up`;\n    const data = {\n      email,\n      password\n    };\n    return this.http.post(url, data).pipe(map(response => {\n      this.setToken(response.token);\n      return response;\n    }));\n  }\n  // Store the token in local storage\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  // Retrieve the token from local storage\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","http","apiBaseUrl","signIn","email","password","url","data","post","pipe","Map","response","setToken","token","signUp","map","localStorage","setItem","tokenKey","getToken","getItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/kenken/Projects/city-hive-project/my-sms-messenger-frontend/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiBaseUrl = 'http://localhost:3000'; // Replace with your API base URL\n\n  constructor(private http: HttpClient) {}\n\n  signIn(email: string, password: string): Observable<any> {\n    const url = `${this.apiBaseUrl}/users/tokens/sign_in`;\n    const data = { email, password };\n    return this.http.post(url, data).pipe(\n      Map((response: any) => {\n        this.setToken(response.token);\n        return response;\n      })\n    );\n  }\n\n  signUp(email: string, password: string): Observable<any> {\n    const url = `${this.apiBaseUrl}/users/tokens/sign_up`;\n    const data = { email, password };\n    return this.http.post(url, data).pipe(\n      map((response: any) => {\n        this.setToken(response.token);\n        return response;\n      })\n    );\n  }\n\n  // Store the token in local storage\n  private setToken(token: string) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  // Retrieve the token from local storage\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,UAAU,GAAG,uBAAuB,CAAC,CAAC;EAEP;;EAEvCC,MAAMA,CAACC,KAAa,EAAEC,QAAgB;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,UAAU,uBAAuB;IACrD,MAAMK,IAAI,GAAG;MAAEH,KAAK;MAAEC;IAAQ,CAAE;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACO,IAAI,CAACF,GAAG,EAAEC,IAAI,CAAC,CAACE,IAAI,CACnCC,GAAG,CAAEC,QAAa,IAAI;MACpB,IAAI,CAACC,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;MAC7B,OAAOF,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAG,MAAMA,CAACV,KAAa,EAAEC,QAAgB;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,UAAU,uBAAuB;IACrD,MAAMK,IAAI,GAAG;MAAEH,KAAK;MAAEC;IAAQ,CAAE;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACO,IAAI,CAACF,GAAG,EAAEC,IAAI,CAAC,CAACE,IAAI,CACnCM,GAAG,CAAEJ,QAAa,IAAI;MACpB,IAAI,CAACC,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;MAC7B,OAAOF,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEA;EACQC,QAAQA,CAACC,KAAa;IAC5BG,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAEL,KAAK,CAAC;EAC5C;EAEA;EACAM,QAAQA,CAAA;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,QAAQ,CAAC;EAC5C;;AAnCWnB,WAAW,C;mBAAXA,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXzB,WAAW,C;SAAXA,WAAW;EAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}