{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nexport let AuthComponent = class AuthComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.isSignIn = true;\n    // Properties for form data\n    this.signInEmail = '';\n    this.signInPassword = '';\n    this.signUpEmail = '';\n    this.signUpPassword = '';\n    this.confirmPassword = '';\n  } // Inject the AuthService\n  toggleForm() {\n    this.isSignIn = !this.isSignIn;\n  }\n  signIn(signInForm) {\n    if (signInForm.valid) {\n      this.authService.signIn(this.signInEmail, this.signInPassword).pipe(catchError(error => {\n        console.error('Sign In Error:', error);\n        // Handle sign in error\n        return throwError(error);\n      })).subscribe(response => {\n        console.log('Sign In Successful:', response);\n        // Handle successful sign in, e.g., redirect to dashboard\n      });\n    }\n  }\n\n  signUp(signUpForm) {\n    if (signUpForm.valid) {\n      if (this.signUpPassword === this.confirmPassword) {\n        this.authService.signUp(this.signUpEmail, this.signUpPassword).pipe(catchError(error => {\n          console.error('Sign Up Error:', error);\n          // Handle sign up error\n          return throwError(error);\n        })).subscribe(response => {\n          console.log('Sign Up Successful:', response);\n          // Handle successful sign up, e.g., redirect to dashboard\n        });\n      } else {\n        console.log('Passwords do not match.');\n      }\n    }\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})], AuthComponent);","map":{"version":3,"names":["Component","catchError","throwError","AuthComponent","constructor","authService","router","isSignIn","signInEmail","signInPassword","signUpEmail","signUpPassword","confirmPassword","toggleForm","signIn","signInForm","valid","pipe","error","console","subscribe","response","log","signUp","signUpForm","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/kenken/Projects/city-hive-project/my-sms-messenger-frontend/src/app/auth/auth.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from './auth.service'; // Import the AuthService\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n})\nexport class AuthComponent {\n  isSignIn: boolean = true;\n\n  // Properties for form data\n  signInEmail: string = '';\n  signInPassword: string = '';\n  signUpEmail: string = '';\n  signUpPassword: string = '';\n  confirmPassword: string = '';\n\n  constructor(private authService: AuthService, private router: Router) {} // Inject the AuthService\n\n  toggleForm() {\n    this.isSignIn = !this.isSignIn;\n  }\n\n  signIn(signInForm: any) {\n    if (signInForm.valid) {\n      this.authService\n        .signIn(this.signInEmail, this.signInPassword)\n        .pipe(\n          catchError((error) => {\n            console.error('Sign In Error:', error);\n            // Handle sign in error\n            return throwError(error);\n          })\n        )\n        .subscribe((response) => {\n          console.log('Sign In Successful:', response);\n          // Handle successful sign in, e.g., redirect to dashboard\n        });\n    }\n  }\n\n  signUp(signUpForm: any) {\n    if (signUpForm.valid) {\n      if (this.signUpPassword === this.confirmPassword) {\n        this.authService\n          .signUp(this.signUpEmail, this.signUpPassword)\n          .pipe(\n            catchError((error) => {\n              console.error('Sign Up Error:', error);\n              // Handle sign up error\n              return throwError(error);\n            })\n          )\n          .subscribe((response) => {\n            console.log('Sign Up Successful:', response);\n            // Handle successful sign up, e.g., redirect to dashboard\n          });\n      } else {\n        console.log('Passwords do not match.');\n      }\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;AAO1B,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAUxBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAT5D,KAAAC,QAAQ,GAAY,IAAI;IAExB;IACA,KAAAC,WAAW,GAAW,EAAE;IACxB,KAAAC,cAAc,GAAW,EAAE;IAC3B,KAAAC,WAAW,GAAW,EAAE;IACxB,KAAAC,cAAc,GAAW,EAAE;IAC3B,KAAAC,eAAe,GAAW,EAAE;EAE2C,CAAC,CAAC;EAEzEC,UAAUA,CAAA;IACR,IAAI,CAACN,QAAQ,GAAG,CAAC,IAAI,CAACA,QAAQ;EAChC;EAEAO,MAAMA,CAACC,UAAe;IACpB,IAAIA,UAAU,CAACC,KAAK,EAAE;MACpB,IAAI,CAACX,WAAW,CACbS,MAAM,CAAC,IAAI,CAACN,WAAW,EAAE,IAAI,CAACC,cAAc,CAAC,CAC7CQ,IAAI,CACHhB,UAAU,CAAEiB,KAAK,IAAI;QACnBC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtC;QACA,OAAOhB,UAAU,CAACgB,KAAK,CAAC;MAC1B,CAAC,CAAC,CACH,CACAE,SAAS,CAAEC,QAAQ,IAAI;QACtBF,OAAO,CAACG,GAAG,CAAC,qBAAqB,EAAED,QAAQ,CAAC;QAC5C;MACF,CAAC,CAAC;;EAER;;EAEAE,MAAMA,CAACC,UAAe;IACpB,IAAIA,UAAU,CAACR,KAAK,EAAE;MACpB,IAAI,IAAI,CAACL,cAAc,KAAK,IAAI,CAACC,eAAe,EAAE;QAChD,IAAI,CAACP,WAAW,CACbkB,MAAM,CAAC,IAAI,CAACb,WAAW,EAAE,IAAI,CAACC,cAAc,CAAC,CAC7CM,IAAI,CACHhB,UAAU,CAAEiB,KAAK,IAAI;UACnBC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;UACtC;UACA,OAAOhB,UAAU,CAACgB,KAAK,CAAC;QAC1B,CAAC,CAAC,CACH,CACAE,SAAS,CAAEC,QAAQ,IAAI;UACtBF,OAAO,CAACG,GAAG,CAAC,qBAAqB,EAAED,QAAQ,CAAC;UAC5C;QACF,CAAC,CAAC;OACL,MAAM;QACLF,OAAO,CAACG,GAAG,CAAC,yBAAyB,CAAC;;;EAG5C;CACD;AAvDYnB,aAAa,GAAAsB,UAAA,EALzBzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWzB,aAAa,CAuDzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}